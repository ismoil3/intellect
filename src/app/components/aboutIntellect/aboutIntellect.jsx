"use client";

import React, { useEffect, useRef, useState } from "react";
import { motion, useAnimation, useInView } from "framer-motion";
import Image from "next/image";
import { useSettingStore } from "@/app/store/setting/useSettingStore";
import Container from "../shared/container/container";

export default function AboutIntellect() {
  const { darkMode } = useSettingStore();
  const controls = useAnimation();
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true });

  useEffect(() => {
    if (isInView) {
      controls.start("visible");
    }
  }, [controls, isInView]);

  return (
    <Container>
      <div className="py-12 space-y-24">
        {/* Hero Section */}
        <motion.div
          ref={ref}
          initial="hidden"
          animate={controls}
          variants={{
            hidden: { opacity: 0, y: 50 },
            visible: { opacity: 1, y: 0, transition: { duration: 0.5 } },
          }}
          className={`relative overflow-hidden rounded-3xl ${
            darkMode
              ? "bg-gray-900"
              : "bg-gradient-to-br from-blue-50 to-indigo-100"
          } p-6 md:p-10`}
        >
          <div className="grid md:grid-cols-2 gap-8 items-center">
            <div>
              <motion.h1
                className={`text-4xl md:text-6xl font-bold mb-4 ${
                  darkMode ? "text-white" : "text-blue-600"
                }`}
                variants={{
                  hidden: { opacity: 0, y: 20 },
                  visible: {
                    opacity: 1,
                    y: 0,
                    transition: { delay: 0.2, duration: 0.5 },
                  },
                }}
              >
                <span>Intellect</span> ‚Äî
              </motion.h1>
              <motion.p
                className={`text-lg ${
                  darkMode ? "text-gray-300" : "text-gray-700"
                }`}
                variants={{
                  hidden: { opacity: 0, y: 20 },
                  visible: {
                    opacity: 1,
                    y: 0,
                    transition: { delay: 0.4, duration: 0.5 },
                  },
                }}
              >
                —ç—Ç–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π —É—Å–ª—É–≥–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
                –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –¥–ª—è 4 –∏ 5 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, –æ–ª–∏–º–ø–∏–∞–¥–∞–º –ø–æ —Ö–∏–º–∏–∏ –∏ –±–∏–æ–ª–æ–≥–∏–∏,
                –∞ —Ç–∞–∫–∂–µ –∏–∑—É—á–µ–Ω–∏—é –∞–Ω–∞—Ç–æ–º–∏–∏, —Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ –∏ –±–∏–æ—Ö–∏–º–∏–∏. –¶–µ–Ω—Ç—Ä —Ç–∞–∫–∂–µ
                –ø—Ä–æ–≤–æ–¥–∏—Ç –∫—É—Ä—Å—ã –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ
                –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
              </motion.p>
            </div>
            <motion.div
              className="relative h-[300px] md:h-[400px]"
              variants={{
                hidden: { opacity: 0, scale: 0.8 },
                visible: {
                  opacity: 1,
                  scale: 1,
                  transition: { delay: 0.6, duration: 0.5 },
                },
              }}
            >
              <Image
                src="/INTELLECT.jpg"
                alt="intellect Academy graduates"
                fill
                className="object-cover rounded-2xl"
              />
            </motion.div>
          </div>
        </motion.div>

        {/* Features Grid */}
        <div className="grid md:grid-cols-2 gap-8">
          <FeatureCard
            icon="‚ú®"
            title="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã"
            description="–≠—Ç–æ—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ü–µ–Ω—Ç—Ä –∏–º–µ–µ—Ç –±–æ–ª–µ–µ —á–µ–º 10-–ª–µ—Ç–Ω–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –¥–æ–±–∏–ª—Å—è –±–æ–ª—å—à–∏—Ö —É—Å–ø–µ—Ö–æ–≤."
            darkMode={darkMode}
          />
          <FeatureCard
            icon="üè¢"
            title="–ù–∞—à–∏ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∏"
            description="–£ –Ω–∞—Å –±—ã–ª–æ –±–æ–ª–µ–µ 2000+ –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤, –∏ –æ–Ω–∏ –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –ø–æ —Å–≤–æ–µ–º—É –≤—ã–±–æ—Ä—É, –∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å —Ä–∞–±–æ—Ç–∞—é—Ç."
            darkMode={darkMode}
          />
        </div>

        {/* Statistics Section */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
          <StatisticCounter end={10} suffix="+" label="–õ–µ—Ç –æ–ø—ã—Ç–∞" darkMode={darkMode} />
          <StatisticCounter end={2000} suffix="+" label="–í—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤" darkMode={darkMode} />
          <StatisticCounter end={50} suffix="+" label="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π" darkMode={darkMode} />
          <StatisticCounter end={95} suffix="%" label="–£—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤" darkMode={darkMode} />
        </div>
      </div>
    </Container>
  );
}

const FeatureCard = ({ icon, title, description, darkMode }) => {
  return (
    <motion.div
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className={`p-6 rounded-2xl ${
        darkMode ? "bg-gray-900" : "bg-white"
      } shadow-lg transition-all duration-300`}
    >
      <div className="w-16 h-16 mb-4 rounded-full bg-gradient-to-br from-purple-400 via-blue-400 to-cyan-400 p-[2px]">
        <div className="w-full h-full rounded-full bg-white flex items-center justify-center">
          <span className="text-2xl">{icon}</span>
        </div>
      </div>
      <h2 className={`text-xl font-bold mb-2 ${darkMode ? "text-white" : "text-gray-800"}`}>
        {title}
      </h2>
      <p className={`${darkMode ? "text-gray-300" : "text-gray-600"}`}>{description}</p>
    </motion.div>
  );
};

const StatisticCounter = ({ end, suffix = "", label, darkMode }) => {
  const [count, setCount] = useState(0);
  const ref = useRef(null);
  const isInView = useInView(ref, { once: true });

  useEffect(() => {
    if (isInView) {
      let start = 0;
      const duration = 2000; 
      const increment = end / (duration / 16);

      const timer = setInterval(() => {
        start += increment;
        if (start >= end) {
          clearInterval(timer);
          setCount(end);
        } else {
          setCount(Math.floor(start));
        }
      }, 16);

      return () => clearInterval(timer);
    }
  }, [isInView, end]);

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 20 }}
      animate={isInView ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: 0.5 }}
      className="text-center"
    >
      <div className={`text-4xl font-bold mb-2 ${darkMode ? "text-white" : "text-blue-600"}`}>
        {count}
        {suffix}
      </div>
      <div className={`text-sm ${darkMode ? "text-gray-400" : "text-gray-600"}`}>{label}</div>
    </motion.div>
  );
};
